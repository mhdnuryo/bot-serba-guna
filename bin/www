#!/usr/bin/env node

/**
 * Module dependencies.
 */

var http = require('http');
var app = require('../app');
var axios = require('axios');
var {Telegraf,Markup} = require('telegraf');
var bot = new Telegraf(process.env.TOKEN)
var api = "https://api.simsimi.net/v2"


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);


var activeCommand = []

bot.start((ctx) => {
  ctx.reply(`ok`)
})

bot.command('timestamp',(ctx) => {
  ctx.reply(Date.now())
})

bot.command('simsimi',(ctx) => {
  activeCommand.push('simsimi')
  bot.on('text',(ctx) => {
    var filter = activeCommand.filter((ac) => ac == 'simsimi')
    var isActive = filter.length > 0 ? true : false;
    if(isActive){
      ctx.reply('ada yg bisa simi bantu?')
    }
  })
})

bot.command('leaveSimi',(ctx) => {
  var filter = activeCommand.filter((ac) => ac != 'simsimi')
  activeCommand = filter
})

bot.command('quit',(ctx) => {
  ctx.reply(activeCommand)
})


bot.launch()

/**
 * Get new page with puppeteer
 */

async function openNewPage(url,next){
  var browser = await puppeteer.launch({
    headless : true,
    ignoreHTTPSErrors : true,
    timeout : 0,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox'
    ]
  })
  var page = await browser.newPage()
  next(url,browser,page)
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

